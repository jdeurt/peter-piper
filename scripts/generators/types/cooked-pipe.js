const { writeFileSync } = require("node:fs");

const getLetter = (i) => String.fromCharCode(65 + i);

const makeGenericParams = (i) => {
    if (i === 0) {
        return "A";
    }

    return `${makeGenericParams(i - 1)}, ${getLetter(i)}`;
};

const makeArgsDef = (i) => {
    if (i === 0) {
        return "a: Pipable<In, A>";
    }

    return `${makeArgsDef(i - 1)}, ${getLetter(
        i
    ).toLowerCase()}: Pipable<${getLetter(i - 1)}, ${getLetter(i)}>`;
};

const makeOverloadSignature = (i) =>
    `<${makeGenericParams(i)}>(${makeArgsDef(i)}): ${getLetter(i)};`;

let result =
    "/* THIS FILE WAS AUTOMATICALLY GENERATED BY `scripts/generators/types/cooked-pipe.js` */\n";
result += "/* DO NOT MODIFY THIS FILE */\n\n";
result += 'import type { Pipable } from "../pipable";\n\n';

result += "export interface CookedPipe<In> {\n";
for (let i = 0; i < 26; i++) {
    result += `${makeOverloadSignature(i)}\n`;
}
result += "(...fns: Pipable[]): unknown;\n";
result += "};";

writeFileSync("./src/types/generated/cooked-pipe.ts", result, "utf8");
