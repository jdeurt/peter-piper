const { writeFileSync } = require("node:fs");

const getLetter = (i) => String.fromCharCode(65 + i);

const makeGenericParams = (i) => {
    if (i === 0) {
        return "AIn, AOut";
    }

    return `${makeGenericParams(i - 1)}, ${getLetter(i)}In, ${getLetter(i)}Out`;
};

const makeArgsDef = (i) => {
    if (i === 0) {
        return "a: Pipable<AIn, AOut>";
    }

    return `${makeArgsDef(i - 1)}, ${getLetter(
        i
    ).toLowerCase()}: Pipable<${getLetter(i - 1)}Out, ${getLetter(i)}Out>`;
};

const makeOverloadSignature = (i) =>
    `<${makeGenericParams(i)}>(${makeArgsDef(i)}): (value: AIn) => ${getLetter(
        i
    )}Out;`;

let result =
    "/* THIS FILE WAS AUTOMATICALLY GENERATED BY `scripts/generators/types/pipe.js` */\n";
result += "/* DO NOT MODIFY THIS FILE */\n\n";
result += 'import type { Pipable } from "../pipable.js";\n\n';

result += "export interface Pipe {\n";
for (let i = 0; i < 26; i++) {
    result += `${makeOverloadSignature(i)}\n`;
}
result += "(...fns: Pipable[]): (value: unknown) => unknown;\n";
result += "};";

writeFileSync("./src/internal/types/generated/pipe.ts", result, "utf8");
